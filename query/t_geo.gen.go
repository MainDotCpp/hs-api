// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"hs-api/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTGeo(db *gorm.DB, opts ...gen.DOOption) tGeo {
	_tGeo := tGeo{}

	_tGeo.tGeoDo.UseDB(db, opts...)
	_tGeo.tGeoDo.UseModel(&model.TGeo{})

	tableName := _tGeo.tGeoDo.TableName()
	_tGeo.ALL = field.NewAsterisk(tableName)
	_tGeo.ID = field.NewInt32(tableName, "id")
	_tGeo.Code = field.NewInt32(tableName, "code")
	_tGeo.Name = field.NewString(tableName, "name")
	_tGeo.En = field.NewString(tableName, "en")
	_tGeo.Iso = field.NewString(tableName, "iso")
	_tGeo.Icon = field.NewString(tableName, "icon")

	_tGeo.fillFieldMap()

	return _tGeo
}

type tGeo struct {
	tGeoDo

	ALL  field.Asterisk
	ID   field.Int32
	Code field.Int32
	Name field.String
	En   field.String
	Iso  field.String
	Icon field.String

	fieldMap map[string]field.Expr
}

func (t tGeo) Table(newTableName string) *tGeo {
	t.tGeoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tGeo) As(alias string) *tGeo {
	t.tGeoDo.DO = *(t.tGeoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tGeo) updateTableName(table string) *tGeo {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Code = field.NewInt32(table, "code")
	t.Name = field.NewString(table, "name")
	t.En = field.NewString(table, "en")
	t.Iso = field.NewString(table, "iso")
	t.Icon = field.NewString(table, "icon")

	t.fillFieldMap()

	return t
}

func (t *tGeo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tGeo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["code"] = t.Code
	t.fieldMap["name"] = t.Name
	t.fieldMap["en"] = t.En
	t.fieldMap["iso"] = t.Iso
	t.fieldMap["icon"] = t.Icon
}

func (t tGeo) clone(db *gorm.DB) tGeo {
	t.tGeoDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tGeo) replaceDB(db *gorm.DB) tGeo {
	t.tGeoDo.ReplaceDB(db)
	return t
}

type tGeoDo struct{ gen.DO }

type ITGeoDo interface {
	gen.SubQuery
	Debug() ITGeoDo
	WithContext(ctx context.Context) ITGeoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITGeoDo
	WriteDB() ITGeoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITGeoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITGeoDo
	Not(conds ...gen.Condition) ITGeoDo
	Or(conds ...gen.Condition) ITGeoDo
	Select(conds ...field.Expr) ITGeoDo
	Where(conds ...gen.Condition) ITGeoDo
	Order(conds ...field.Expr) ITGeoDo
	Distinct(cols ...field.Expr) ITGeoDo
	Omit(cols ...field.Expr) ITGeoDo
	Join(table schema.Tabler, on ...field.Expr) ITGeoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITGeoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITGeoDo
	Group(cols ...field.Expr) ITGeoDo
	Having(conds ...gen.Condition) ITGeoDo
	Limit(limit int) ITGeoDo
	Offset(offset int) ITGeoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITGeoDo
	Unscoped() ITGeoDo
	Create(values ...*model.TGeo) error
	CreateInBatches(values []*model.TGeo, batchSize int) error
	Save(values ...*model.TGeo) error
	First() (*model.TGeo, error)
	Take() (*model.TGeo, error)
	Last() (*model.TGeo, error)
	Find() ([]*model.TGeo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGeo, err error)
	FindInBatches(result *[]*model.TGeo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TGeo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITGeoDo
	Assign(attrs ...field.AssignExpr) ITGeoDo
	Joins(fields ...field.RelationField) ITGeoDo
	Preload(fields ...field.RelationField) ITGeoDo
	FirstOrInit() (*model.TGeo, error)
	FirstOrCreate() (*model.TGeo, error)
	FindByPage(offset int, limit int) (result []*model.TGeo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITGeoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tGeoDo) Debug() ITGeoDo {
	return t.withDO(t.DO.Debug())
}

func (t tGeoDo) WithContext(ctx context.Context) ITGeoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tGeoDo) ReadDB() ITGeoDo {
	return t.Clauses(dbresolver.Read)
}

func (t tGeoDo) WriteDB() ITGeoDo {
	return t.Clauses(dbresolver.Write)
}

func (t tGeoDo) Session(config *gorm.Session) ITGeoDo {
	return t.withDO(t.DO.Session(config))
}

func (t tGeoDo) Clauses(conds ...clause.Expression) ITGeoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tGeoDo) Returning(value interface{}, columns ...string) ITGeoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tGeoDo) Not(conds ...gen.Condition) ITGeoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tGeoDo) Or(conds ...gen.Condition) ITGeoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tGeoDo) Select(conds ...field.Expr) ITGeoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tGeoDo) Where(conds ...gen.Condition) ITGeoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tGeoDo) Order(conds ...field.Expr) ITGeoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tGeoDo) Distinct(cols ...field.Expr) ITGeoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tGeoDo) Omit(cols ...field.Expr) ITGeoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tGeoDo) Join(table schema.Tabler, on ...field.Expr) ITGeoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tGeoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITGeoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tGeoDo) RightJoin(table schema.Tabler, on ...field.Expr) ITGeoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tGeoDo) Group(cols ...field.Expr) ITGeoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tGeoDo) Having(conds ...gen.Condition) ITGeoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tGeoDo) Limit(limit int) ITGeoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tGeoDo) Offset(offset int) ITGeoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tGeoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITGeoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tGeoDo) Unscoped() ITGeoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tGeoDo) Create(values ...*model.TGeo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tGeoDo) CreateInBatches(values []*model.TGeo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tGeoDo) Save(values ...*model.TGeo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tGeoDo) First() (*model.TGeo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGeo), nil
	}
}

func (t tGeoDo) Take() (*model.TGeo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGeo), nil
	}
}

func (t tGeoDo) Last() (*model.TGeo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGeo), nil
	}
}

func (t tGeoDo) Find() ([]*model.TGeo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TGeo), err
}

func (t tGeoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TGeo, err error) {
	buf := make([]*model.TGeo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tGeoDo) FindInBatches(result *[]*model.TGeo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tGeoDo) Attrs(attrs ...field.AssignExpr) ITGeoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tGeoDo) Assign(attrs ...field.AssignExpr) ITGeoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tGeoDo) Joins(fields ...field.RelationField) ITGeoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tGeoDo) Preload(fields ...field.RelationField) ITGeoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tGeoDo) FirstOrInit() (*model.TGeo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGeo), nil
	}
}

func (t tGeoDo) FirstOrCreate() (*model.TGeo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TGeo), nil
	}
}

func (t tGeoDo) FindByPage(offset int, limit int) (result []*model.TGeo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tGeoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tGeoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tGeoDo) Delete(models ...*model.TGeo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tGeoDo) withDO(do gen.Dao) *tGeoDo {
	t.DO = *do.(*gen.DO)
	return t
}
